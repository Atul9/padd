# SIGMA
'<>=+-_*/\\%(){}[],.;:#!?^$@&|"\'`~ \t\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

#----------------------------------------------------------------------------------------------------------------------#
# CDFA                                                                                                                 #
#----------------------------------------------------------------------------------------------------------------------#

start
    '{' -> ^LBRACE
    '}' -> ^RBRACE
    '(' -> ^LPAREN
    ')' -> ^RPAREN
    '[' -> ^LARRI
    ']' -> ^RARRI

    ',' -> ^COMMA
    ';' -> ^SEMI
    ':' -> colon

    '@' -> ^AT

    # OPERATORS
    '=' -> eq
    '<' -> lt
    '>' -> gt
    '!' -> not
    '+' -> plus
    '-' -> minus
    '*' -> star
    '%' -> pct
    '/' -> slash
    '~' -> ^COMP
    '&' -> and
    '^' -> hat
    '|' -> or
    '?' -> ^QST
    '.' -> dot

    # LITERALS
    '"' -> string
    '\'' -> char
    '0' -> zero
    'true' | 'false' | 'null' -> char_lit
    '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> num

    # KEYWORDS
    'abstract' -> ^MOD
    'assert' -> ^ASSERT
    'boolean' -> ^PRIM
    'break' -> ^BREAK
    'byte' -> ^PRIM
    'case' -> ^CASE
    'catch' -> ^CATCH
    'char' -> ^PRIM
    'class' -> ^CLASS
    'continue' -> ^CONTINUE
    'default' -> ^DEFAULT
    'do' -> do
    'else' -> ^ELSE
    'enum' -> ^ENUM
    'extends' -> ^EXTENDS
    'final' -> final
    'float' -> ^PRIM
    'for' -> ^FOR
    'if' -> ^IF
    'implements' -> ^IMPLEMENTS
    'import' -> ^IMPORT
    'instanceof' -> ^INSTANCEOF
    'int' -> int
    'long' -> ^PRIM
    'native' -> ^MOD
    'new' -> ^NEW
    'package' -> ^PACKAGE
    'private' -> ^MOD
    'protected' -> ^MOD
    'public' -> ^MOD
    'return' -> ^RETURN
    'short' -> ^PRIM
    'static' -> ^STATIC
    'strictfp' -> ^MOD
    'super' -> ^SUPER
    'switch' -> ^SWITCH
    'synchronized' -> ^SYNCHRONIZED
    'this' -> ^THIS
    'throw' -> throw
    'transient' -> ^MOD
    'try' -> ^TRY
    'void' -> ^VOID
    'volatile' -> ^MOD
    'while' -> ^WHILE

    # MISC
    ' ' | '\t' | '\n' -> ws
    '#' | '$' | '`' -> fail
    _ -> id;

#
# OPERATORS
#

eq      ^ASSN
    '=' -> ^CMP_EQ;

not     ^NOT
    '=' -> ^CMP_EQ;

lt      ^LT
    '<=' -> ^ASSN
    '=' -> ^CMP_REL;

gt      ^GT
    '>=' | '>>=' -> ^ASSN
    '=' -> ^CMP_REL;

plus    ^PLUS
    '+' -> ^INC
    '=' -> ^ASSN;

minus   ^MINUS
    '>' -> ^ARROW
    '-' -> ^DEC
    '=' -> ^ASSN;

star    ^STAR
    '=' -> ^ASSN;

pct     ^PCT
    '=' -> ^ASSN;

slash   ^SLASH
    '/' -> lcom
    '*' -> bcom
    '=' -> ^ASSN;

and     ^AND
    '=' -> ^ASSN
    '&' -> ^AND_L;

or      ^OR_BI
    '=' -> ^ASSN
    '|' -> ^OR_L;

dot     ^DOT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> float
    '..' -> ^TRIDOT;

hat     ^OR_BE
    '=' -> ^ASSN;

#
# LITERALS
#

char_lit    ^LIT
    '\'' | '"' | '.' | '?' | '|' | '^' | '&' | '~' | '/' | '%' | '*' | '-' | '+' | '!' | '>' | '<' | '=' | '@' | ':'
        | ';' | ',' | ']' | '[' | ')' | '(' | '}' | '{' | ' ' | '\t' | '\n' | '#' | '\\' | '$' | '`' -> fail
    _ -> id;

string
    '"' -> ^LIT
    '\\' -> string_esc
    _ -> string;

string_esc
    _ -> string;

char
    '\'' -> ^LIT
    '\\' -> char_esc
    _ -> char;

char_esc
    _ -> char;

zero    ^LIT
    '0' -> zero
    'x' | 'X' -> hex
    'b' | 'B' -> bin
    '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> oct
    '.' -> float
    'e' | 'E' -> floatexp
    'f' | 'd' | 'F' | 'D' | 'L' -> ^LIT;

num     ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_' -> num
    '.' -> float
    'e' | 'E' -> floatexp
    'f' | 'd' | 'F' | 'D' | 'L' -> ^LIT;

bin  ^LIT
    '0' | '1' | '_' -> bin;

hex     ^LIT
    'L' -> ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C'
        | 'D' | 'E' | 'F' | '_' -> hex;

oct   ^LIT
    'L' -> ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '_' -> oct;

float   ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_' -> float
    'e' | 'E' -> floatexp
    'f' | 'd' | 'F' | 'D' -> ^LIT;

floatexp
    '-' | '+' -> floatexp
    '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> float;

#
# MISC
#

do      ^DO
    'ouble' -> ^PRIM
    '\'' | '"' | '.' | '?' | '|' | '^' | '&' | '~' | '/' | '%' | '*' | '-' | '+' | '!' | '>' | '<' | '=' | '@' | ':'
        | ';' | ',' | ']' | '[' | ')' | '(' | '}' | '{' | ' ' | '\t' | '\n' | '#' | '\\' | '$' | '`' -> fail
    _ -> id;

throw   ^THROW
    's' -> ^THROWS
    '\'' | '"' | '.' | '?' | '|' | '^' | '&' | '~' | '/' | '%' | '*' | '-' | '+' | '!' | '>' | '<' | '=' | '@' | ':'
        | ';' | ',' | ']' | '[' | ')' | '(' | '}' | '{' | ' ' | '\t' | '\n' | '#' | '\\' | '$' | '`' -> fail
    _ -> id;

int     ^PRIM
    'erface' -> ^INTERFACE
    '\'' | '"' | '.' | '?' | '|' | '^' | '&' | '~' | '/' | '%' | '*' | '-' | '+' | '!' | '>' | '<' | '=' | '@' | ':'
        | ';' | ',' | ']' | '[' | ')' | '(' | '}' | '{' | ' ' | '\t' | '\n' | '#' | '\\' | '$' | '`' -> fail
    _ -> id;

final   ^FINAL
    'ly' -> ^FINALLY
    '\'' | '"' | '.' | '?' | '|' | '^' | '&' | '~' | '/' | '%' | '*' | '-' | '+' | '!' | '>' | '<' | '=' | '@' | ':'
        | ';' | ',' | ']' | '[' | ')' | '(' | '}' | '{' | ' ' | '\t' | '\n' | '#' | '\\' | '$' | '`' -> fail
    _ -> id;

colon   ^COLON
    ':' -> ^M_REF;

ws      ^_
    ' ' | '\t' | '\n' -> ws;

lcom    ^_
    '\n' -> fail
    _ -> lcom;

bcom
    '*/' -> bcomm # TODO get rid of this after introducing comments
    _ -> bcom;

bcomm   ^_; # TODO get rid of this after introducing comments

MOD | ASSERT | PRIM | BREAK | CASE | CATCH | ENUM | CLASS | CONTINUE | DEFAULT | DO | ELSE | EXTENDS | FINALLY | FOR
    | IF | IMPLEMENTS | IMPORT | INSTANCEOF | NEW | PACKAGE | RETURN | SUPER | SWITCH | THIS | THROWS | TRY | VOID | WHILE
    | INTERFACE | SYNCHRONIZED | STATIC
    '\'' | '"' | '.' | '?' | '|' | '^' | '&' | '~' | '/' | '%' | '*' | '-' | '+' | '!' | '>' | '<' | '=' | '@' | ':'
         | ';' | ',' | ']' | '[' | ')' | '(' | '}' | '{' | ' ' | '\t' | '\n' | '#' | '\\' | '$' | '`' -> fail
     _ -> id;

id      ^ID
    'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's'
        | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'
        | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '$' | '_' | '0'
        | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> id;

#----------------------------------------------------------------------------------------------------------------------#
# GRAMMAR                                                                                                              #
#----------------------------------------------------------------------------------------------------------------------#

# TODO add indentation

cmp_unit
    -> package_decl_opt import_decls_opt type_decls_opt;

package_decl_opt
    -> annotations_opt PACKAGE id_chain SEMI `{0}{1} {2}{3}\n\n`
    ->;

import_decls_opt
    -> import_decls `{0}\n\n`
    ->;
import_decls
    -> import_decl import_decls `{0}\n{1}`
    -> import_decl;
import_decl
    -> IMPORT typename SEMI `{0} {1}{2}`
    -> IMPORT typename DOT STAR SEMI `{0} {1}{2}{3}{4}`
    -> IMPORT STATIC typename DOT ID SEMI `{0} {1} {2}{3}{4}{5}`
    -> IMPORT STATIC typename DOT STAR SEMI `{0} {1} {2}{3}{4}{5}`;

type_decls_opt
    -> type_decls
    ->;
type_decls
    -> type_decl type_decls `{0}\n{1}`
    -> type_decl;
type_decl
    -> class_dec
    -> enum_dec
    -> interface_dec
    -> annotation_dec
    -> SEMI;

#
# CLASS
#

class_dec
    -> modifiers_opt CLASS ID type_parameters_opt superclass_opt superinterfaces_opt class_body
        `{0}{1} {2}{3} {4}{5}{6}`;

superclass_opt
    -> superclass `{0} `
    ->;
superclass
    -> EXTENDS class_type `{0} {1}`;

superinterfaces_opt
    -> superinterfaces `{0} `
    ->;
superinterfaces
    -> IMPLEMENTS class_types `{0} {1}`;

class_body_opt
    -> class_body
    ->;
class_body
    -> LBRACE class_body_decs_opt RBRACE `{0}\n{1;prefix=[prefix]\t}[prefix]{2}\n`;
class_body_decs_opt
    -> class_body_decs
    ->;
class_body_decs
    -> class_body_dec class_body_decs `[prefix]{0}\n{1}`
    -> class_body_dec `[prefix]{0}`;
class_body_dec
    -> class_member_dec
    -> block
    -> STATIC block
    -> constructor_dec;

class_member_dec
    -> field_dec
    -> method_dec
    -> class_dec
    -> interface_dec
    -> enum_dec
    -> annotation_dec
    -> SEMI;

constructor_dec
    -> modifiers_opt constructor_declarator throws_opt constructor_body `{0}{1} {2}{3}`;
constructor_body
    -> LBRACE explicit_constructor_invocation_opt block_statements_opt RBRACE `{0}\n{1}{2}{3}`;
constructor_declarator
    -> type_parameters_opt ID LPAREN formal_parameter_list_opt RPAREN;

explicit_constructor_invocation_opt
    -> explicit_constructor_invocation `{0}\n\n`
    ->;
explicit_constructor_invocation
    -> type_arguments_opt THIS LPAREN argument_list_opt RPAREN SEMI
    -> type_arguments_opt SUPER LPAREN argument_list_opt RPAREN SEMI
    -> expr_name DOT type_arguments_opt SUPER LPAREN argument_list_opt RPAREN SEMI
    -> primary DOT type_arguments_opt SUPER LPAREN argument_list_opt RPAREN SEMI;

argument_list_opt
    -> argument_list
    ->;
argument_list
    -> expr COMMA argument_list `{0}{1} {2}`
    -> expr;

field_dec
    -> modifiers_opt type variable_declarator_list SEMI `{0}{1} {2}{3}\n`;

method_dec
    -> modifiers_opt method_header method_body;
method_header
    -> result method_declarator throws_opt `{0} {1} {2}`
    -> type_parameters annotations_opt result method_declarator throws_opt `{0} {1}{2} {3}{4}`;
method_declarator
    -> ID LPAREN formal_parameter_list_opt RPAREN array_dims_opt;
method_body
    -> block
    -> SEMI `{0}\n`;

formal_parameter_list_opt
    -> formal_parameter_list
    ->;
formal_parameter_list
    -> receiver_parameter
    -> formal_parameters COMMA last_formal_parameter `{0}{1} {2}`
    -> last_formal_parameter;
formal_parameters
    -> formal_parameter COMMA formal_parameters `{0}{1} {2}`
    -> receiver_parameter COMMA formal_parameters `{0}{1} {2}`
    -> formal_parameter
    -> receiver_parameter;
formal_parameter
    -> modifiers_opt type variable_declarator_id `{0}{1} {2}`;
receiver_parameter
    -> annotations_opt type ID DOT THIS `{0}{1} {2}{3}{4}`
    -> annotations_opt type THIS `{0}{1} {2}`;
last_formal_parameter
    -> modifiers_opt type annotations_opt TRIDOT variable_declarator_id `{0}{1}{2} {3}`
    -> formal_parameter;

throws_opt
    -> throws `{0} `
    ->;
throws
    -> THROWS exception_type_list `{0} {1}`;

exception_type_list
    -> exception_type COMMA exception_type_list `{0}{1} {2}`
    -> exception_type;
exception_type
    -> class_type
    -> type_variable;

result
    -> type
    -> VOID;

#
# ENUM
#

enum_dec
    -> modifiers_opt ENUM ID superinterfaces_opt enum_body `{0}{1} {2} {3}{4}`;

enum_body
    -> LBRACE enum_const_list_opt comma_opt enum_body_declarations_opt RBRACE `{0}\n{1}{2}\n{3}{4}\n`;

enum_const_list_opt
    -> enum_const_list
    ->;
enum_const_list
    -> enum_const COMMA enum_const_list `{0}{1}\n{2}`
    -> enum_const;
enum_const
    -> annotations_opt ID enum_const_arg_list_opt class_body_opt;
enum_const_arg_list_opt
    -> LPAREN argument_list_opt RPAREN
    ->;

enum_body_declarations_opt
    -> SEMI class_body_decs_opt `{0}\n\n{1}\n\n`
    ->;

#
# INTERFACE
#

interface_dec
    -> modifiers_opt INTERFACE ID type_parameters_opt superclass_opt interface_body `{0}{1} {2}{3} {4}{5}`;

interface_body
    -> LBRACE interface_member_decs_opt RBRACE `{0}\n\n{1}{2}\n`;

interface_member_decs_opt
    -> interface_member_decs
    ->;
interface_member_decs
    -> class_member_dec interface_member_decs `{0}\n\n{1}`
    -> class_member_dec `{0}\n\n`;

#
# ANNOTATION
#

annotation_dec
    -> modifiers_opt AT INTERFACE ID annotation_body `{0}{1}{2} {3} {4}`;

annotation_body
    -> LBRACE annotation_member_decs_opt RBRACE `{0}\n\n{1}{2}\n`;

annotation_member_decs_opt
    -> annotation_member_decs
    ->;
annotation_member_decs
    -> annotation_member_dec annotation_member_decs `{0}\n\n{1}`
    -> annotation_member_dec `{0}\n\n`;
annotation_member_dec
    -> annotation_element_dec
    -> class_member_dec;

annotation_element_dec
    -> modifiers_opt type ID LPAREN RPAREN array_dims_opt default_value_opt SEMI `{0}{1} {2}{3}{4}{5}{6}{7}`;

default_value_opt
    -> default_value
    ->;
default_value
    -> DEFAULT element_value ` {0} {1}`;

#
# TYPE
#

type_parameters_opt
    -> type_parameters
    ->;
type_parameters
    -> LT type_parameter_list GT;
type_parameter_list
    -> type_parameter COMMA type_parameter_list `{0}{1} {2}`
    -> type_parameter;
type_parameter
    -> annotations_opt ID type_bound_opt `{0}{1}{2}`;

type_bound_opt
    -> type_bound ` {0}`
    ->;
type_bound
    -> EXTENDS type_variable `{0} {1}`
    -> EXTENDS class_type additional_bounds_opt  `{0} {1} {2}`;
additional_bounds_opt
    -> AND additional_bounds `{0} {1}`
    ->;
additional_bounds
    -> class_type AND additional_bounds `{0} {1} {2}`
    -> class_type;

type_arguments_opt
    -> type_arguments
    ->;
type_arguments
    -> LT type_argument_list GT;
type_argument_list
    -> type_argument COMMA type_argument_list `{0}{1} {2}`
    -> type_argument;
type_argument
    -> type
    -> wildcard;

type
    -> non_array_type array_dims_opt;

typename
    -> typename DOT ID
    -> ID;

array_type
    -> non_array_type array_dims;

non_array_type
    -> class_type
    -> primitive_type;

class_types
    -> class_type COMMA class_types `{0}{1} {2}`
    -> class_type;
class_type
    -> class_type DOT class_type_internal
    -> class_type_internal;
class_type_internal
    -> type_variable type_arguments_opt;

class_type_to_instantiate
    -> annotated_ids type_arguments
    -> annotated_ids LT GT
    -> annotated_ids;

class_literal
    -> typename array_dims_opt DOT CLASS
    -> PRIM array_dims_opt DOT CLASS
    -> VOID DOT CLASS;

type_variable
    -> annotations_opt ID;

primitive_type
    -> annotations_opt PRIM;

array_dims_opt
    -> array_dims
    ->;
array_dims
    -> array_dim array_dims
    -> array_dim;
array_dim
    -> annotations_opt LARRI RARRI;

wildcard
    -> annotations_opt QST wildcard_bounds_opt;
wildcard_bounds_opt
    -> wildcard_bounds
    ->;
wildcard_bounds
    -> EXTENDS type ` {0} {1}`
    -> SUPER type ` {0} {1}`;

#
# MISC
#

element_value_pairs_opt
    -> element_value_pairs
    ->;
element_value_pairs
    -> element_value_pair COMMA element_value_pairs `{0}{1} {2}`
    -> element_value_pair;
element_value_pair
    -> ID ASSN element_value `{0} {1} {2}`;
element_value
    -> conditional_expr
    -> element_value_array_initializer
    -> annotation;
element_value_array_initializer
    -> LBRACE element_values_opt comma_opt RBRACE;
element_values_opt
    -> element_values
    ->;
element_values
    -> element_value COMMA element_values `{0}{1} {2}`
    -> element_value;

annotations_opt
    -> annotations `{0} `
    ->;
annotations
    -> annotation annotations `{0} {1}`
    -> annotation;
annotation
    -> AT typename LPAREN element_value_pairs_opt RPAREN
    -> AT typename LPAREN element_value RPAREN
    -> AT typename;

annotated_ids
    -> annotations_opt ID DOT annotated_ids
    -> annotations_opt ID;

id_chain
    -> ID DOT id_chain
    -> ID;

id_list
    -> ID COMMA id_list `{0}{1} {2}`
    -> ID;

comma_opt
    -> COMMA
    ->;

semi_opt
    -> SEMI
    ->;

variable_declarator_list
    -> variable_declarator COMMA variable_declarator_list `{0}{1} {2}`
    -> variable_declarator;
variable_declarator
    -> variable_declarator_id variable_initializer_opt;
variable_declarator_id
    -> ID array_dims_opt;

variable_initializers_opt
    -> variable_initializers
    ->;
variable_initializers
    -> variable_initializer COMMA variable_initializers
    -> variable_initializer;
variable_initializer_opt
    -> ASSN variable_initializer ` {0} {1}`
    ->;
variable_initializer
    -> expr
    -> array_initializer;

array_initializer
    -> LBRACE variable_initializers_opt comma_opt RBRACE;

block
    -> LBRACE block_statements_opt RBRACE `{0}\n{1;prefix=[prefix]\t}[prefix]{2}\n`;

#
# STATEMENTS
#

block_statements_opt
    -> block_statements `[prefix]{0}`
    ->;
block_statements
    -> block_statement block_statements `{0}\n[prefix]{1}`
    -> block_statement `{0}\n`;
block_statement
    -> lvar_dec_statement
    -> class_dec
    -> statement;

lvar_dec_statement
    -> lvar_dec SEMI `[prefix]{0}{1}\n`;
lvar_dec
    -> modifiers_opt type variable_declarator_list;

statement
    -> statement_without_trailing_substatement
    -> labeled_statement
    -> if_then_statement
    -> if_then_else_statement
    -> while_statement
    -> for_statement;

statement_without_trailing_substatement
    -> block
    -> SEMI
    -> statement_expression SEMI
    -> assert_statement
    -> switch_statement
    -> do_statement
    -> break_statement
    -> continue_statement
    -> return_statement
    -> synchronized_statement
    -> throw_statement
    -> try_statement;

statement_expression_list
    -> statement_expression COMMA statement_expression_list
    -> statement_expression;
statement_expression
    -> assignment
    -> INC unary_expr
    -> DEC unary_expr
    -> postfix_expr INC
    -> postfix_expr DEC
    -> method_invocation
    -> class_icreation_expr;

assignment
    -> lhs ASSN expr `{0} {1} {2}`;

assert_statement
    -> ASSERT expr SEMI `{0} {1}{2}`
    -> ASSERT expr COLON expr SEMI `{0} {1}{2} {3}{4}`;

switch_statement
    -> SWITCH LPAREN expr RPAREN switch_block `{0} {1}{2}{3} {4}`;

switch_block
    -> LBRACE switch_bsgs_opt switch_labels_opt RBRACE `{0}\n{1}{2}{3}\n`;

switch_bsgs_opt
    -> switch_bsgs
    ->;
switch_bsgs
    -> switch_bsg switch_bsgs
    -> switch_bsg;
switch_bsg
    -> switch_labels block_statements;

switch_labels_opt
    -> switch_labels
    ->;
switch_labels
    -> switch_label switch_labels
    -> switch_label;
switch_label
    -> CASE expr COLON `{0} {1}{2}`
    -> CASE ID COLON `{0} {1}{2}`
    -> DEFAULT COLON;

do_statement
    -> DO statement WHILE LPAREN expr RPAREN SEMI;

break_statement
    -> BREAK SEMI
    -> BREAK ID SEMI `{0} {1}{2}`;

continue_statement
    -> CONTINUE SEMI
    -> CONTINUE ID SEMI `{0} {1}{2}`;

return_statement
    -> RETURN SEMI
    -> RETURN expr SEMI `{0} {1}{2}`;

synchronized_statement
    -> SYNCHRONIZED LPAREN expr RPAREN block `{0} {1}{2}{3} {4}`;

throw_statement
    -> THROW expr SEMI `{0} {1}{2}`;

try_statement
    -> TRY block catches `{0} {1}{2}`
    -> TRY block catches_opt finally `{0} {1}{2}{3}`
    -> try_with_resources_statement;

try_with_resources_statement
    -> TRY resources_specification block catches_opt finally_opt `{0} {1} {2}{3}{4}`;
resources_specification
    -> LPAREN resources semi_opt RPAREN;
resources
    -> resource SEMI resources `{0}{1} {2}`
    -> resource;
resource
    -> modifiers_opt type variable_declarator_id ASSN expr `{0}{1} {2} {3} {4}`;

finally_opt
    -> finally
    ->;
finally
    -> FINALLY block `{0} {1}`;

catches_opt
    -> catches
    ->;
catches
    -> catch_clause catches
    -> catch_clause;
catch_clause
    -> CATCH LPAREN catch_formal_parameter RPAREN block `{0} {1}{2}{3} {4}`;
catch_formal_parameter
    -> modifiers_opt catch_type variable_declarator_id `{0}{1} {2}`;
catch_type
    -> class_type catch_type_internal;
catch_type_internal
    -> OR_BI class_type catch_type_internal ` {0} {1}{2}`
    ->;

labeled_statement
    -> ID COLON statement `{0}{1} {2}`;

if_then_statement
    -> IF LPAREN expr RPAREN statement `{0} {1}{2}{3} {4}`;

if_then_else_statement
    -> IF LPAREN expr RPAREN statement ELSE statement `{0} {1}{2}{3} {4}{5} {6}`;

while_statement
    -> WHILE LPAREN expr RPAREN statement `{0} {1}{2}{3} {4}`;

for_statement
    -> basic_for_statement statement `{0} {1}`
    -> enhanced_for_statement statement `{0} {1}`;

basic_for_statement
    -> FOR LPAREN for_init_opt SEMI for_expr_opt SEMI for_update_opt RPAREN `{0} {1}{2}{3}{4}{5}{6}{7}`;

for_init_opt
    -> for_init
    ->;
for_init
    -> lvar_dec
    -> statement_expression_list;

for_expr_opt
    -> expr ` {0}`
    ->;

for_update_opt
    -> for_update ` {0}`
    ->;
for_update
    -> statement_expression_list;

enhanced_for_statement
    -> FOR LPAREN modifiers_opt type variable_declarator_id COLON expr RPAREN `{0} {1}{2}{3} {4} {5} {6}{7}`;

#
# EXPRESSIONS
#

expr_opt
    -> expr
    ->;
expr
    -> non_assn_expr
    -> lhs ASSN expr `{0} {1} {2}`;

non_assn_expr
    -> lambda_expr
    -> conditional_expr;

lhs
    -> expr_name
    -> field_access
    -> array_access;

lambda_expr
    -> lambda_parameters ARROW lambda_body;

lambda_parameters
    -> ID
    -> LPAREN formal_parameter_list_opt RPAREN
    -> LPAREN id_list RPAREN;

lambda_body
    -> expr
    -> block;

conditional_expr
    -> conditional_or_expr
    -> conditional_or_expr QST expr COLON non_assn_expr `{0} {1} {2} {3} {4}`;

conditional_or_expr
    -> conditional_and_expr
    -> conditional_or_expr OR_L conditional_and_expr `{0} {1} {2}`;

conditional_and_expr
    -> inclusive_or_expr
    -> conditional_and_expr AND_L inclusive_or_expr `{0} {1} {2}`;

inclusive_or_expr
    -> exclusive_or_expr
    -> inclusive_or_expr OR_BI exclusive_or_expr `{0} {1} {2}`;

exclusive_or_expr
    -> and_expr
    -> exclusive_or_expr OR_BE and_expr `{0} {1} {2}`;

and_expr
    -> equality_expr
    -> and_expr AND equality_expr `{0} {1} {2}`;

equality_expr
    -> relational_expr
    -> equality_expr CMP_EQ relational_expr `{0} {1} {2}`;

relational_expr
    -> shift_expr
    -> relational_expr relational_op shift_expr `{0} {1} {2}`;

shift_expr
    -> additive_expr
    -> shift_expr shift_op additive_expr `{0} {1} {2}`;

additive_expr
    -> multiplicative_expr
    -> additive_expr additive_op multiplicative_expr `{0} {1} {2}`;

multiplicative_expr
    -> unary_expr
    -> multiplicative_expr multiplicative_op unary_expr `{0} {1} {2}`;

unary_expr
    -> INC unary_expr
    -> DEC unary_expr
    -> PLUS unary_expr
    -> MINUS unary_expr
    -> unary_expr_not_plus_minus;

unary_expr_not_plus_minus
    -> COMP unary_expr
    -> NOT unary_expr
    -> postfix_expr
    -> cast_expr;

postfix_expr
    -> primary
    -> expr_name
    -> postfix_expr INC
    -> postfix_expr DEC;

cast_expr
    -> LPAREN PRIM RPAREN unary_expr
    -> LPAREN type additional_bounds_opt RPAREN unary_expr_not_plus_minus
    -> LPAREN type additional_bounds_opt RPAREN lambda_expr;

expr_name
    -> ID
    -> expr_name DOT ID;

primary
    -> primary_no_new_array
    -> array_creation_expr;

primary_no_new_array
    -> LIT
    -> class_literal
    -> THIS
    -> typename DOT THIS
    -> LPAREN expr RPAREN
    -> class_icreation_expr
    -> field_access
    -> array_access
    -> method_invocation
    -> method_reference;

class_icreation_expr
    -> unqualified_class_icreation_expr
    -> expr_name DOT unqualified_class_icreation_expr
    -> primary DOT unqualified_class_icreation_expr;

unqualified_class_icreation_expr
    -> NEW type_arguments_opt class_type_to_instantiate LPAREN arguments_opt RPAREN class_body_opt;

field_access
    -> primary DOT ID
    -> SUPER DOT ID
    -> typename DOT super DOT ID;

array_access
    -> expr_name LARRI expr RARRI
    -> primary_no_new_array LARRI expr RARRI;

method_invocation
    -> ID LPAREN arguments_opt RPAREN
    -> typename DOT type_arguments_opt ID LPAREN arguments_opt RPAREN
    -> expr_name DOT type_arguments_opt ID LPAREN arguments_opt RPAREN
    -> primary DOT type_arguments_opt ID LPAREN arguments_opt RPAREN
    -> SUPER DOT type_arguments_opt ID LPAREN arguments_opt RPAREN
    -> typename DOT SUPER DOT type_arguments_opt ID LPAREN arguments_opt RPAREN;

arguments_opt
    -> arguments
    ->;
arguments
    -> expr COMMA arguments `{0}{1} {2}`
    -> expr;

method_reference
    -> expr_name M_REF type_arguments_opt ID
    -> type M_REF type_arguments_opt ID
    -> primary M_REF type_arguments_opt ID
    -> SUPER M_REF type_arguments_opt ID
    -> typename M_REF type_arguments_opt ID
    -> class_type M_REF type_arguments_opt NEW
    -> array_type M_REF NEW;

array_creation_expr
    -> NEW PRIM dim_exprs array_dims_opt
    -> NEW class_type dim_exprs array_dims_opt
    -> NEW PRIM array_dims array_initializer
    -> NEW class_type array_dims array_initializer;

dim_exprs
    -> dim_expr dim_exprs
    -> dim_expr;
dim_expr
    -> annotations_opt LARRI expr RARRI;

#
# MODIFIERS
#

modifiers_opt
    -> modifiers
    ->;
modifiers
    -> modifier modifiers `{0} {1}`
    -> modifier `{0} `;
modifier
    -> annotation
    -> MOD
    -> SYNCHRONIZED
    -> STATIC
    -> FINAL
    -> DEFAULT;

#
# OPERATORS
#

shift_op
    -> LT LT
    -> GT GT
    -> GT GT GT;

relational_op
    -> CMP_REL
    -> LT
    -> GT
    -> INSTANCEOF;

additive_op
    -> PLUS
    -> MINUS;

multiplicative_op
    -> STAR
    -> PCT
    -> SLASH;
