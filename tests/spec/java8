# SIGMA
'<>=+-*/\\%(){}[],.;:!?^@|"\'~ \t\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

#----------------------------------------------------------------------------------------------------------------------#
# CDFA                                                                                                                 #
#----------------------------------------------------------------------------------------------------------------------#

start
    '{' -> ^LBRACE
    '}' -> ^RBRACE
    '(' -> ^LPAREN
    ')' -> ^RPAREN
    '[' -> ^LARRI
    ']' -> ^RARRI

    ',' -> ^COMMA
    ';' -> ^SEMI
    ':' -> ^COLON

    '@' -> ^AT

    # OPERATORS
    '=' -> eq
    '<' -> lt
    '>' -> gt
    '!' -> not
    '+' -> plus
    '-' -> minus
    '*' -> star
    '%' -> pct
    '/' -> slash
    '~' -> ^COMP
    '&' -> and
    '^' -> ^BOP
    '|' -> or
    '?' -> ^QST
    '.' -> dot

    # LITERALS
    '"' -> string
    '\'' -> char
    '0' -> zero
    'true' | 'false' | 'null' -> ^LIT
    '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> num

    # KEYWORDS
    'abstract' -> ^ABSTRACT
    'assert' -> ^ASSERT
    'boolean' -> ^BOOLEAN
    'break' -> ^BREAK
    'byte' -> ^PRIM
    'case' -> ^CASE
    'catch' -> ^CATCH
    'char' -> ^PRIM
    'class' -> ^CLASS
    'const' -> ^CONST
    'continue' -> ^CONTINUE
    'default' -> ^DEFAULT
    'do' -> ^DO
    'double' -> ^PRIM
    'else' -> ^ELSE
    'enum' -> ^ENUM
    'extends' -> ^EXTENDS
    'final' -> ^FINAL
    'finally' -> ^FINALLY
    'float' -> ^PRIM
    'for' -> ^FOR
    'goto' -> ^GOTO
    'if' -> ^IF
    'implements' -> ^IMPLEMENTS
    'import' -> ^IMPORT
    'instanceof' -> ^INSTANCEOF
    'int' -> ^PRIM
    'interface' -> ^INTERFACE
    'long' -> ^PRIM
    'native' -> ^NATIVE
    'new' -> ^NEW
    'package' -> ^PACKAGE
    'private' -> ^VISIBILITY
    'protected' -> ^VISIBILITY
    'public' -> ^VISIBILITY
    'return' -> ^RETURN
    'short' -> ^PRIM
    'static' -> ^STATIC
    'strictfp' -> ^STRICTFP
    'super' -> ^SUPER
    'switch' -> ^SWITCH
    'synchronized' -> ^SYNCHRONIZED
    'this' -> ^THIS
    'throw' -> ^THROW
    'throws' -> ^THROWS
    'transient' -> ^TRANSIENT
    'try' -> ^TRY
    'void' -> ^VOID
    'volatile' -> ^VOLATILE
    'while' -> ^WHILE

    # MISC
    ' ' | '\t' | '\n' -> ws
    'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's'
        | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'
        | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '$' | '_' -> id;

#
# OPERATORS
#

eq      ^ASSN
    '=' -> ^EQ;

not     ^NOT
    '=' -> ^COMP;

lt      ^COMP
    '<' -> ^BL_SHIFT
    '=' -> ^COMP;

gt      ^COMP
    '>' -> brs
    '=' -> ^COMP;

brs     ^BOP
    '>' -> ^BOP;

plus    ^PLUS
    '+' -> ^INC
    '=' -> ^ASSN;

minus   ^MINUS
    '>' -> ^ARROW
    '-' -> ^DEC
    '=' -> ^ASSN;

star    ^BOP
    '=' -> ^ASSN;

pct     ^BOP
    '=' -> ^ASSN;

slash   ^BOP
    '/' -> lcom
    '*' -> bcom
    '=' -> ^ASSN;

and     ^AND
    '&' -> ^COMP;

or      ^OR_BI
    '|' -> ^COMP;

dot     ^DOT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> float
    '..' -> ^TRIDOT;

#
# LITERALS
#

string
    '"' -> ^LIT
    '\\"' -> string
    _ -> string;

char    # ignoring length
    '\'' -> ^LIT
    _ -> char;

zero    ^LIT
    'x' | 'X' -> hex
    'b' | 'B' -> bin
    '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> oct
    'e' | 'E' -> floatexp
    'f' | 'd' | 'F' | 'D' -> ^LIT;

num     ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_' -> num
    '.' -> float
    'e' | 'E' -> floatexp
    'f' | 'd' | 'F' | 'D' -> ^LIT;

bin  ^LIT
    '0' | '1' | '_' -> bin;

hex     ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C'
        | 'D' | 'E' | 'F' | '_' -> hex;

oct   ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '_' -> oct;

float   ^LIT
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_' -> float
    'e' | 'E' -> floatexp
    'f' | 'd' | 'F' | 'D' -> ^LIT;

floatexp
    '-' | '+' -> floatexp
    '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> float;

#
# MISC
#

ws      ^_
    ' ' | '\t' | '\n' -> ws;

lcom ^COMMENT
    '\n' -> fail
    _ -> lcom;

bcom
    '*/' -> ^COMMENT
    '_' -> bcom;

id      ^ID
    'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's'
        | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'
        | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '$' | '_' | '0'
        | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> id;

#----------------------------------------------------------------------------------------------------------------------#
# GRAMMAR                                                                                                              #
#----------------------------------------------------------------------------------------------------------------------#

CompilationUnit
    -> PackageDeclarationOpt ImportDeclarationsOpt TypeDeclarationsOpt;

PackageDeclarationOpt
    -> AnnotationsOpt PACKAGE id_chain SEMI;

ImportDeclarationsOpt
    -> ImportDeclarations
    ->;
ImportDeclarations
    -> ImportDeclaration ImportDeclarations
    -> ImportDeclaration;
ImportDeclaration
    -> IMPORT typename SEMI
    -> IMPORT typename DOT STAR SEMI
    -> IMPORT STATIC typename DOT ID SEMI
    -> IMPORT STATIC typename DOT STAR SEMI;

TypeDeclarationsOpt
    -> TypeDeclarations
    ->;
TypeDeclarations
    -> TypeDeclaration TypeDeclarations
    -> TypeDeclaration;
TypeDeclaration
    -> ClassDeclaration
    -> InterfaceDeclaration
    -> SEMI;

#
# CLASS
#

class_declaration
    -> class_modifiers_opt CLASS ID type_parameters_opt superclass_opt superinterfaces_opt class_body;

class_modifiers_opt
    -> class_modifiers
    ->;
class_modifiers
    -> class_modifier class_modifiers
    -> class_modifier;
class_modifier
    -> annotation
    -> VISIBILITY
    -> ABSTRACT
    -> STATIC
    -> FINAL
    -> STRICTFP;

superclass_opt
    -> superclass
    ->;
superclass
    -> EXTENDS class_type

superinterfaces_opt
    -> superinterfaces
    ->;
superinterfaces
    -> IMPLEMENTS class_types;

class_body
    -> LBRACE class_body_dec RBRACE;
class_body_declaration
    -> class_member_dec
    -> instance_initializer
    -> static_initializer
    -> constructor_declaration;

class_member_declaration
    -> field_declaration
    -> method_declaration
    -> class_declaration
    -> interface_declaration
    -> SEMI;

instance_initializer
    ->;

static_initializer
    ->;

constructor_declaration
    ->;

field_declaration
    -> field_modifiers_opt type variable_declarator_list;

method_declaration
    ->;

class_declaration
    ->;

interface_declaration
    ->;

#
# ENUM
#

enum_declaration
    ->;

#
# ANNOTATION
#

annotation_declaration
    ->;

#
# INTERFACE
#

interface_declaration
    ->;

#
# TYPE
#

type_parameters_opt
    -> LT type_parameters GT
    ->;
type_parameters
    -> type_parameter COMMA type_parameters
    -> type_parameter;
type_parameter
    -> annotations_opt ID type_bound_opt;

type_bound_opt
    -> type_bound
    ->;
type_bound
    -> EXTENDS type_variable
    -> EXTENDS class_type AND type_extra_bounds_opt;
type_extra_bounds_opt
    -> type_extra_bounds
    ->;
type_extra_bounds
    -> class_type AND type_extra_bounds
    -> class_type;

type_arguments_opt
    -> LT type_arguments GT
    ->;
type_arguments
    -> type_argument COMMA type_arguments
    -> type_argument;
type_argument
    -> type
    -> wildcard;

type
    -> non_array_type array_dims_opt;

non_array_type
    -> class_type
    -> type_variable
    -> primitive_type;

class_types
    -> class_type COMMA class_types
    -> class_type;
class_type
    -> class_type DOT class_type_internal
    -> class_type_internal;
class_type_internal
    -> type_variable type_arguments_opt;

type_variable
    -> annotations_opt ID;

primitive_type
    -> annotations_opt PRIM;

array_dims_opt
    -> array_dims
    ->;
array_dims
    -> array_dim array_dims
    -> array_dim;
array_dim
    -> annotations_opt LARRI RARRI;

wildcard
    -> annotations_opt QST wildcard_bounds_opt
wildcard_bounds_opt
    -> wildcard_bounds
    ->;
wildcard_bounds
    -> EXTENDS type
    -> SUPER type;

#
# MISC
#

ElementValuePairsOpt
    -> ElementValuePairs
    ->;
ElementValuePairs
    -> ElementValuePair COMMA ElementValuePairs
    -> ElementValuePair;
ElementValuePair
    -> ID ASSN ElementValue;
ElementValue
    -> ConditionalExpression
    -> ElementValueArrayInitializer
    -> annotation;
ElementValueArrayInitializer
    -> LBRACE ElementValuesOpt comma_opt RBRACE;
ElementValuesOpt
    -> ElementValues
    ->;
ElementValues
    -> ElementValue COMMA ElementValues
    -> ElementValue;

ConditionalExpression
    -> ;

annotations_opt
    -> annotations
    ->;
annotations
    -> annotation annotations
    -> annotation;
annotation
    -> AT typename LPAREN ElementValuePairsOpt RPAREN
    -> AT typename LPAREN ElementValue RPAREN
    -> AT typename;

typename
    -> ID DOT typename
    -> ID;

id_chain
    -> ID DOT id_chain
    -> ID;

comma_opt
    -> COMMA
    ->;

field_modifiers_opt
    -> field_modifiers
    ->;
field_modifiers
    -> field_modifier field_modifiers
    -> field_modifier;
field_modifier
    -> annotations_opt
    -> VISIBILITY
    -> STATIC
    -> FINAL
    -> TRANSIENT
    -> VOLATILE;

variable_declarator_list
    -> variable_declarator COMMA varaible_declarator
    -> variable_declarator;
variable_declarator
    -> ID array_dims_opt variable_initializer_opt;

variable_initializer_opt
    -> EQ variable_initializer
    ->;
variable_initializer
    -> expression
    -> array_initializer;

expression
    ->;

array_initializer
    ->;