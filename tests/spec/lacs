'<>=+-*/%(){},;:! \t\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

# lacs dfa

start
    '(' -> ^LPAREN
    ')' -> ^RPAREN
    '{' -> ^LBRACE
    '}' -> ^RBRACE
    '+' -> ^PLUS
    '-' -> ^MINUS
    '*' -> ^STAR
    '%' -> ^PCT
    ',' -> ^COMMA
    ';' -> ^SEMI
    ':' -> ^COLON
    ' ' | '\t' | '\n' -> ws
    '=' -> eq
    '!=' -> ^NE
    '<' -> lt
    '>' -> gt
    '/' -> slash
    '0' -> num
    '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> num
    'def' -> ^DEF
    'var' -> ^VAR
    'Int' -> ^INT
    'if' -> ^IF
    'else' -> ^ELSE
    _ -> ^ID;

ID
    '<' | '>' | '=' | '+' | '-' | '*' | '/' | '%' | '(' | ')' | '{' | '}' | ',' | ';' | ':' | '!' | ' ' | '\n' | '\t' -> fail
    _ -> ID;

num     ^NUM
    '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> num;

slash   ^SLASH
    '/' -> comment;

comment ^COMMENT
    '\n' -> fail
    _ -> comment;

eq      ^BECOMES
    '=' -> ^EQ
    '>' -> ^ARROW;

lt      ^LT
    '=' -> ^LE;

gt      ^GT
    '=' -> ^GE;

ws      ^WHITESPACE
    ' ' | '\t' | '\n' -> ws;

# lacs grammar

S
    -> defdefs;
defdefs
    -> defdef defdefs `{0}\n\n{1}`
    -> defdef;
defdef
    -> w DEF w ID w LPAREN parmsopt w RPAREN w COLON type w BECOMES w LBRACE vardefsopt defdefsopt expras w RBRACE
        `[prefix]{1} {3}{5}{6}{8}{10} {11} {13} {15}\n{16;prefix=[prefix]\t}{17;prefix=[prefix]\t}{18;prefix=[prefix]\t}[prefix]{20}`;
parmsopt
    -> parms
    -> ;
parms
    -> vardef w COMMA parms `{0}{2} {3}`
    -> vardef;
vardef
    -> w ID w COLON type `{1}{3} {4}`;
type
    -> w INT
    -> w LPAREN typesopt w RPAREN w ARROW type `{1}{2}{4} {6} {7}`;
typesopt
    -> types
    -> ;
types
    -> type w COMMA types `{0}{2} {3}`
    -> type;
vardefsopt
    -> w VAR vardef w SEMI vardefsopt `[prefix]{1} {2}{4}\n{5}\n`
    -> ;
defdefsopt
    -> defdefs `{0}\n\n`
    -> ;
expras
    -> expra w SEMI expras `[prefix]{0}{2}\n{3}`
    -> expra `[prefix]{0}\n`;
expra
    -> w ID w BECOMES expr `{1} {3} {4}`
    -> expr;
expr
    -> w IF w LPAREN test w RPAREN w LBRACE expras w RBRACE w ELSE w LBRACE expras w RBRACE
        `{1} {3}{4}{6} {8}\n{9;prefix=[prefix]\t}[prefix]{11} {13} {15}\n{16;prefix=[prefix]\t}[prefix]{18}`
    -> term
    -> expr w PLUS term `{0} {2} {3}`
    -> expr w MINUS term `{0} {2} {3}`;
term
    -> factor
    -> term w STAR factor `{0} {2} {3}`
    -> term w SLASH factor `{0} {2} {3}`
    -> term w PCT factor `{0} {2} {3}`;
factor
    -> w ID
    -> w NUM
    -> w LPAREN expr w RPAREN
    -> factor w LPAREN argsopt w RPAREN;
test
    -> expr w NE expr `{0} {2} {3}`
    -> expr w LT expr `{0} {2} {3}`
    -> expr w LE expr `{0} {2} {3}`
    -> expr w GE expr `{0} {2} {3}`
    -> expr w GT expr `{0} {2} {3}`
    -> expr w EQ expr `{0} {2} {3}`;
argsopt
    -> args
    -> ;
args
    -> expr w COMMA args `{0}{2} {3}`
    -> expr;
w
    -> WHITESPACE w `{1}`
    -> COMMENT w `{0}\n{1}`
    -> ;